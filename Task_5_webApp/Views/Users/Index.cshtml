@model IEnumerable<Task_5_webApp.Models.User>

@functions {
    public string GetRelativeTime(DateTime dt)
    {
        var span = DateTime.Now - DateTime.Now;
        if (span.TotalSeconds < 60)
            return $"{(int)span.TotalSeconds} seconds ago";
        if (span.TotalMinutes < 60)
            return $"{(int)span.TotalMinutes} minutes ago";
        if (span.TotalHours < 24)
            return $"{(int)span.TotalHours} hours ago";
        if (span.TotalDays < 7)
            return $"{(int)span.TotalDays} days ago";
        if (span.TotalDays < 30)
            return $"{(int)(span.TotalDays / 7)} weeks ago";
        return dt.ToString("dd-MMM-yyyy");
    }
}   

@{
    Layout = "_Layout";
    string sort = Context.Request.Query["sort"];
    Func<string, string> sortLink = col =>
    {
        bool isAsc = sort == $"{col}_asc";
        bool isDesc = sort == $"{col}_desc";
        string next = isAsc ? $"{col}_desc" : $"{col}_asc";
        string arrow = isAsc ? "↑" : isDesc ? "↓" : "";
        string label = col switch
        {
            "name" => "Name",
            "email" => "Email",
            "lastlogin" => "Last login",
            _ => col
        };
        return $"<a href=\"?sort={next}\" class=\"text-decoration-none text-dark\">{label} {arrow}</a>";
    };
}

<h2 class="mb-4">User Management</h2>

<!-- Toolbar + Search -->
<div class="d-flex flex-wrap align-items-center justify-content-between gap-3 mb-3">
    <!-- Toolbar -->
    <form id="toolbarForm" method="post" class="d-flex flex-wrap gap-2">
        <button formaction="/Users/Block" class="btn btn-outline-danger" id="btnBlock" disabled>
            <i class="bi bi-lock"></i> Block
        </button>
        <button formaction="/Users/Unblock" class="btn btn-outline-success" id="btnUnblock" disabled title="Unblock selected">
            <i class="bi bi-unlock"></i> Unblock
        </button>
        <button formaction="/Users/Delete" class="btn btn-outline-secondary" id="btnDelete"  title="Delete selected">
            <i class="bi bi-trash"></i> Delete
        </button>
        <button formaction="/Users/DeleteUnverified" class="btn btn-outline-warning" title="Delete all unverified">
            <i class="bi bi-person-x"></i> Delete unverified
        </button>
    </form>

    <!-- Filter aligned right -->
    <div class="ms-auto" style="min-width: 250px;">
        <input type="text" class="form-control" placeholder="Filter" />
    </div>
</div>

<!-- User table -->
<table class="table table-striped table-hover align-middle">
    <thead class="table-light">
        <tr>
            <th style="width:40px;">
                <input type="checkbox" id="chkAll" />
            </th>
            <th>@Html.Raw(sortLink("name"))</th>
            <th>@Html.Raw(sortLink("email"))</th>
            <th>Status</th>
            <th>@Html.Raw(sortLink("lastlogin").Replace("Last login", "Last seen"))</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var u in Model)
        {
            var isBlocked = u.Status == "Blocked";
            <tr class="@(isBlocked ? "opacity-50" : "")">
                <td>
                    <input type="checkbox" class="rowchk" value="@u.Id" />
                </td>
                <td class="@(isBlocked ? "text-decoration-line-through" : "")">
                    <div>@u.LastName, @u.FirstName</div>
                    <div class="text-muted small">@u.Designation</div>
                </td>
                <td>@u.Email</td>
                <td>
                    <span>@u.Status</span>
                </td>
                @{
                    var lastSeen = u.LastLoginTime;
                    string tooltip = lastSeen?.ToString("f") ?? "Never logged in";
                    string relative = lastSeen == null ? "-" : GetRelativeTime(lastSeen.Value);
                }
                <td data-bs-toggle="tooltip" title="@tooltip" style="cursor: pointer;">@relative</td>

            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        (() => {
            const chkAll = document.getElementById('chkAll');
            const rowChks = Array.from(document.querySelectorAll('.rowchk'));
            const toolbarForm = document.getElementById('toolbarForm');
            const btns = ['btnBlock', 'btnUnblock', 'btnDelete'].map(id => document.getElementById(id));

            function refreshToolbar() {
                const total = rowChks.length;
                const checkedRows = rowChks.filter(c => c.checked);
                const checked = checkedRows.length;

                chkAll.indeterminate = checked > 0 && checked < total;
                chkAll.checked = checked === total;

                // Reset buttons
                btnBlock.disabled = true;
                btnUnblock.disabled = true;

                // Determine status of selected users
                const selectedStatuses = checkedRows.map(c => c.closest("tr").querySelector("td:nth-child(4)").textContent.trim());

                if (selectedStatuses.length > 0) {
                    const allBlocked = selectedStatuses.every(s => s === "Blocked");
                    const allUnblocked = selectedStatuses.every(s => s !== "Blocked");

                    btnBlock.disabled = !allUnblocked;
                    btnUnblock.disabled = !allBlocked;
                }

                // Sync selected IDs
                toolbarForm.querySelectorAll('input[name="ids"]').forEach(el => el.remove());
                checkedRows.forEach(c => {
                    const hidden = document.createElement('input');
                    hidden.type = 'hidden';
                    hidden.name = 'ids';
                    hidden.value = c.value;
                    toolbarForm.appendChild(hidden);
                });
            }

            chkAll.addEventListener('change', () => {
                rowChks.forEach(c => c.checked = chkAll.checked);
                refreshToolbar();
            });

            rowChks.forEach(c => c.addEventListener('change', refreshToolbar));

            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        })();
    </script>
}