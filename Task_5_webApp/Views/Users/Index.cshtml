@model IEnumerable<Task_5_webApp.Models.User>

@functions {
    public string GetRelativeTime(DateTime dt)
    {
        var span = DateTime.Now - dt;
        if (span.TotalSeconds < 60)
            return $"{(int)span.TotalSeconds} seconds ago";
        if (span.TotalMinutes < 60)
            return $"{(int)span.TotalMinutes} minutes ago";
        if (span.TotalHours < 24)
            return $"{(int)span.TotalHours} hours ago";
        if (span.TotalDays < 7)
            return $"{(int)span.TotalDays} days ago";
        if (span.TotalDays < 30)
            return $"{(int)(span.TotalDays / 7)} weeks ago";
        return dt.ToString("dd-MMM-yyyy");
    }
}

@{
    Layout = "_Layout";
    string sort = Context.Request.Query["sort"];
    string search = Context.Request.Query["search"];
    string pageSize = Context.Request.Query["pageSize"];
    int currentPage = ViewBag.Page ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    int totalCount = ViewBag.TotalCount ?? 0;
    int pageSizeValue = ViewBag.PageSize ?? 10;

    Func<string, string> sortLink = col =>
    {
        bool isAsc = sort == $"{col}_asc";
        bool isDesc = sort == $"{col}_desc";
        string next = isAsc ? $"{col}_desc" : $"{col}_asc";
        string arrow = isAsc ? "<i class='fa-solid fa-sort-up'></i>" : isDesc ? "<i class='fa-solid fa-sort-down'></i>" : "";
        string label = col switch
        {
            "name" => "Name",
            "email" => "Email",
            "lastlogin" => "Last login",
            _ => col
        };

        var queryParams = new Dictionary<string, string>
        {
            ["sort"] = next,
            ["search"] = search,
            ["pageSize"] = pageSizeValue.ToString()
        };
        var queryString = string.Join("&", queryParams.Where(x => !string.IsNullOrEmpty(x.Value)).Select(x => $"{x.Key}={x.Value}"));
        return $"<a href=\"?{queryString}\" class=\"text-decoration-none text-dark\">{label} {arrow}</a>";
    };
}

<h2 class="mb-4">User List</h2>

<!-- Toolbar + Search -->
<div class="d-flex flex-wrap align-items-center justify-content-between gap-3 mb-3 bg-light">
    <!-- Toolbar -->
    <form id="toolbarForm" method="post" class="d-flex flex-wrap gap-2">
        @* For staying same page and same page size *@
        <input type="hidden" name="pageSize" value="@pageSizeValue" />
        <input type="hidden" name="page" value="@currentPage" />
        <input type="hidden" id="selectedIds" name="selectedIds" value="" />
        
        <button formaction="/Users/Block" class="btn btn-outline-primary border-2" id="btnBlock" disabled>
            <i class="fa-solid fa-lock"></i> Block
        </button>
        <button formaction="/Users/Unblock" class="btn btn-outline-primary border-2" id="btnUnblock" disabled title="Unblock selected">
            <i class="fa-solid fa-lock-open"></i>
        </button>
        <button formaction="/Users/Delete" class="btn btn-outline-danger border-2" id="btnDelete" disabled title="Delete selected">
            <i class="fa-solid fa-trash"></i>
        </button>
        @* <button formaction="/Users/DeleteUnverified" class="btn btn-outline-warning" title="Delete all unverified">
            <i class="fa-solid fa-person-circle-xmark"></i> Delete unverified
        </button> *@
    </form>

    <!-- Search -->
    <div class="d-flex">
        <input type="text" id="searchInput" class="form-control text-opacity-50 border-2" placeholder="Filter by name or email" value="@ViewBag.Search" />
        <input type="hidden" id="sortValue" value="@ViewBag.Sort" />
    </div>
</div>

<!-- Results info and page size selector -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="text-muted">
        @if (totalCount > 0)
        {
            var startItem = (currentPage - 1) * pageSizeValue + 1;
            var endItem = Math.Min(currentPage * pageSizeValue, totalCount);
            <span>Showing @startItem to @endItem of @totalCount users</span>
        }
        else
        {
            <span>No users found</span>
        }
    </div>

    <div class="d-flex align-items-center gap-2">
        <label for="pageSizeSelect" class="form-label mb-0 small">Users per page:</label>
        <select class="form-select form-select-sm" id="pageSizeSelect" style="width: auto;">
            <option value="5" selected="@(pageSizeValue == 5)">5</option>
            <option value="10" selected="@(pageSizeValue == 10)">10</option>
            <option value="20" selected="@(pageSizeValue == 20)">20</option>
            <option value="50" selected="@(pageSizeValue == 50)">50</option>
        </select>
    </div>
</div>

<!-- User table -->
@if (Model.Any())
{
    <table class="table table-striped table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th style="width:40px;">
                    <input type="checkbox" id="chkAll" />
                </th>
                <th>@Html.Raw(sortLink("name"))</th>
                <th>@Html.Raw(sortLink("email"))</th>
                <th>Status</th>
                <th>@Html.Raw(sortLink("lastlogin").Replace("Last login", "Last seen"))</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in Model)
            {
                var isBlocked = u.Status == "Blocked";
                <tr class="@(isBlocked ? "opacity-50" : "")">
                    <td>
                        <input type="checkbox" class="rowchk" value="@u.Id" />
                    </td>
                    <td class="@(isBlocked ? "text-decoration-line-through" : "")">
                        <div>@u.LastName, @u.FirstName</div>
                        <div class="text-muted small">
                            @(string.IsNullOrWhiteSpace(u.Designation) || u.Designation == "" ? "N/A" : u.Designation)
                        </div>
                    </td>
                    <td>@u.Email</td>
                    <td>
                        <span>@u.Status</span>
                    </td>
                    @{
                        var lastSeen = u.LastLoginTime;
                        string tooltip = lastSeen?.ToString("f") ?? "Never logged in";
                        string relative = lastSeen == null ? "-" : GetRelativeTime(lastSeen.Value);
                    }
                    <td data-bs-toggle="tooltip" title="@tooltip" style="cursor: pointer;">@relative</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="text-center py-5">
        <div class="text-muted">
            <i class="fa-solid fa-search fa-2x mb-3 opacity-50"></i>
            <h5>No users found</h5>
            <p class="mb-0">@(!string.IsNullOrEmpty(search) ? "Try adjusting your search terms" : "No users available")</p>
        </div>
    </div>
}

<!-- Pagination -->
@if (totalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @{
                // Previous page
                var prevDisabled = currentPage == 1 ? "disabled" : "";
                <li class="page-item @prevDisabled">
                    @if (currentPage > 1)
                    {
                        <a class="page-link" href="?page=@(currentPage - 1)&search=@search&sort=@sort&pageSize=@pageSizeValue" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    }
                    else
                    {
                        <span class="page-link" aria-hidden="true">&laquo;</span>
                    }
                </li>

                // Page numbers
                int startPage = Math.Max(1, currentPage - 2);
                int endPage = Math.Min(totalPages, currentPage + 2);

                // Show first page and ellipsis if needed
                if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=1&search=@search&sort=@sort&pageSize=@pageSizeValue">1</a>
                    </li>
                    if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                // Page numbers
                for (int i = startPage; i <= endPage; i++)
                {
                    var active = i == currentPage ? "active" : "";
                    <li class="page-item @active">
                        <a class="page-link" href="?page=@i&search=@search&sort=@sort&pageSize=@pageSizeValue">@i</a>
                    </li>
                }

                // Show last page and ellipsis if needed
                if (endPage < totalPages)
                {
                    if (endPage < totalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="?page=@totalPages&search=@search&sort=@sort&pageSize=@pageSizeValue">@totalPages</a>
                    </li>
                }

                // Next page
                var nextDisabled = currentPage == totalPages ? "disabled" : "";
                <li class="page-item @nextDisabled">
                    @if (currentPage < totalPages)
                    {
                        <a class="page-link" href="?page=@(currentPage + 1)&search=@search&sort=@sort&pageSize=@pageSizeValue" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    }
                    else
                    {
                        <span class="page-link" aria-hidden="true">&raquo;</span>
                    }
                </li>
            }
        </ul>
    </nav>
}

@section Scripts {
    <script>
        // Safe initialization with null checks
        const chkAll = document.getElementById('chkAll');
        const rowChks = document.querySelectorAll('.rowchk');
        const toolbarForm = document.getElementById('toolbarForm');
        const selectedIdsInput = document.getElementById('selectedIds');
        const searchInput = document.getElementById('searchInput');
        const sortValue = document.getElementById('sortValue');
        const pageSizeSelect = document.getElementById('pageSizeSelect');

        // Only initialize table functionality if table exists
        if (toolbarForm && selectedIdsInput) {
            // Get button references safely
            const btnBlock = document.getElementById('btnBlock');
            const btnUnblock = document.getElementById('btnUnblock');
            const btnDelete = document.getElementById('btnDelete');

            // Get previously selected IDs from URL or hidden field
            function getSelectedIds() {
                const urlParams = new URLSearchParams(window.location.search);
                const idsParam = urlParams.get('selectedIds');
                return idsParam ? idsParam.split(',').map(id => parseInt(id)).filter(id => !isNaN(id)) : [];
            }

            // Restore checkbox states on page load
            function restoreCheckboxStates() {
                if (rowChks.length === 0) return;

                const selectedIds = getSelectedIds();
                rowChks.forEach(checkbox => {
                    const userId = parseInt(checkbox.value);
                    checkbox.checked = selectedIds.includes(userId);
                });
                refreshToolbar();
            }

            function refreshToolbar() {
                const total = rowChks.length;
                const checkedRows = Array.from(rowChks).filter(c => c.checked);
                const checked = checkedRows.length;

                // Only update chkAll if it exists
                if (chkAll) {
                    chkAll.indeterminate = checked > 0 && checked < total;
                    chkAll.checked = checked === total;
                }

                // Reset buttons safely
                if (btnBlock) btnBlock.disabled = true;
                if (btnUnblock) btnUnblock.disabled = true;
                if (btnDelete) btnDelete.disabled = true;

                // Determine status of selected users
                const selectedStatuses = checkedRows.map(c => {
                    const statusCell = c.closest("tr")?.querySelector("td:nth-child(4)");
                    return statusCell ? statusCell.textContent.trim() : "";
                }).filter(status => status !== "");

                if (selectedStatuses.length > 0) {
                    const allBlocked = selectedStatuses.every(s => s === "Blocked");
                    const allUnblocked = selectedStatuses.every(s => s !== "Blocked");

                    if (btnBlock) btnBlock.disabled = !allUnblocked;
                    if (btnUnblock) btnUnblock.disabled = !allBlocked;
                    if (btnDelete) btnDelete.disabled = false;
                }

                // Update selected IDs in hidden field
                const selectedIds = checkedRows.map(c => c.value).join(',');
                selectedIdsInput.value = selectedIds;

                // Sync selected IDs for form submission
                toolbarForm.querySelectorAll('input[name="ids"]').forEach(el => el.remove());
                checkedRows.forEach(c => {
                    const hidden = document.createElement('input');
                    hidden.type = 'hidden';
                    hidden.name = 'ids';
                    hidden.value = c.value;
                    toolbarForm.appendChild(hidden);
                });
            }

            // Modified sort links to preserve selected IDs
            function updateSortLinks() {
                const sortLinks = document.querySelectorAll('thead a[href*="sort="]');
                const selectedIds = Array.from(document.querySelectorAll('.rowchk:checked'))
                    .map(cb => cb.value)
                    .join(',');

                sortLinks.forEach(link => {
                    const url = new URL(link.href);
                    if (selectedIds) {
                        url.searchParams.set('selectedIds', selectedIds);
                    }
                    link.href = url.toString();
                });
            }

            // Add event listeners only if elements exist
            if (chkAll) {
                chkAll.addEventListener('change', () => {
                    rowChks.forEach(c => c.checked = chkAll.checked);
                    refreshToolbar();
                    updateSortLinks();
                });
            }

            // Add event listeners to row checkboxes
            rowChks.forEach(c => {
                c.addEventListener('change', () => {
                    refreshToolbar();
                    updateSortLinks();
                });
            });

            // Initialize table functionality
            restoreCheckboxStates();
            updateSortLinks();
        }

        // Tooltip initialization (safe)
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        if (tooltipTriggerList.length > 0) {
            tooltipTriggerList.forEach(tooltipTriggerEl => {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Search functionality (safe)
        if (searchInput && sortValue) {
            let searchTimeout = null;

            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);

                searchTimeout = setTimeout(() => {
                    const searchTerm = this.value;
                    const params = new URLSearchParams();

                    if (searchTerm) {
                        params.append('search', searchTerm);
                    }

                    if (sortValue.value) {
                        params.append('sort', sortValue.value);
                    }

                    // Preserve page size and selected IDs
                    const urlParams = new URLSearchParams(window.location.search);
                    const currentPageSize = urlParams.get('pageSize');
                    const selectedIds = urlParams.get('selectedIds');

                    if (currentPageSize) {
                        params.append('pageSize', currentPageSize);
                    }
                    if (selectedIds) {
                        params.append('selectedIds', selectedIds);
                    }

                    // Reset to page 1 when searching
                    params.append('page', '1');

                    // Simple page reload with search parameters
                    window.location.href = '?' + params.toString();
                }, 800);
            });
        }

        // Page size change handler (safe)
        if (pageSizeSelect) {
            pageSizeSelect.addEventListener('change', function() {
                const newPageSize = this.value;
                const params = new URLSearchParams(window.location.search);

                params.set('pageSize', newPageSize);
                params.set('page', '1');

                // Preserve selected IDs
                const selectedIds = Array.from(document.querySelectorAll('.rowchk:checked'))
                    .map(cb => cb.value)
                    .join(',');
                if (selectedIds) {
                    params.set('selectedIds', selectedIds);
                }

                window.location.href = '?' + params.toString();
            });
        }

        // Update pagination links to preserve selected IDs
        function updatePaginationLinks() {
            const paginationLinks = document.querySelectorAll('.pagination a[href*="page="]');
            const selectedIds = Array.from(document.querySelectorAll('.rowchk:checked'))
                .map(cb => cb.value)
                .join(',');

            paginationLinks.forEach(link => {
                const url = new URL(link.href);
                if (selectedIds) {
                    url.searchParams.set('selectedIds', selectedIds);
                }
                link.href = url.toString();
            });
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize pagination links
            updatePaginationLinks();

            // Set focus to search input and move cursor to end
            if (searchInput) {
                searchInput.focus();
                const length = searchInput.value.length;
                searchInput.setSelectionRange(length, length);
            }
        });
    </script>
}